{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","loading","solving","input","dictionary","initialize","bind","inputChanged","modalClosed","solve","fetch","then","res","text","this","words","split","reduce","prev","cur","chars","toLowerCase","charSet","Set","key","sort","join","push","setState","event","currentTarget","value","filter","c","test","solution","undefined","required","charAt","uniq","map","set","forEach","length","includes","word","rows","r","cols","Col","className","Row","Container","Spinner","animation","InputGroup","FormControl","placeholder","onChange","maxLength","autoFocus","Text","toUpperCase","Button","variant","id","disabled","onClick","role","Modal","size","show","onHide","scrollable","Header","closeButton","Title","Body","solutionRows","Footer","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.112f99e1.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Modal from 'react-bootstrap/Modal'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { loading: true, solving: false, input: '' }\n    this.dictionary = {}\n\n    this.initialize = this.initialize.bind(this)\n    this.inputChanged = this.inputChanged.bind(this)\n    this.modalClosed = this.modalClosed.bind(this)\n    this.solve = this.solve.bind(this)\n  }\n  componentDidMount() {\n    fetch(\n      'https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt'\n    )\n      .then((res) => res.text())\n      .then(this.initialize)\n  }\n  initialize(words) {\n    this.dictionary = words.split('\\r\\n').reduce((prev, cur) => {\n      const chars = cur.toLowerCase().split('')\n      const charSet = new Set(chars)\n      const key = [...charSet].sort().join('')\n      if (prev[key]) {\n        prev[key].push(cur)\n      } else {\n        prev[key] = [cur]\n      }\n      return prev\n    }, {})\n    this.setState({ loading: false })\n  }\n  inputChanged(event) {\n    const value = event.currentTarget.value\n    const chars = value.split('')\n    const input = chars.filter((c) => /^[A-Z]$/i.test(c)).join('')\n    this.setState({ input })\n  }\n  modalClosed() {\n    this.setState({ solution: undefined })\n  }\n  solve() {\n    this.setState({ solving: true })\n    const required = this.state.input.toLowerCase().charAt(0)\n    const uniq = new Set(this.state.input.toLowerCase().split(''))\n    const powerSet = [...uniq].sort().reduce((prev, cur) => {\n      const withCur = prev.map((set) => [...set, cur])\n      withCur.forEach((set) => prev.push(set))\n      prev.push([cur])\n      return prev\n    }, [])\n    const solution = powerSet\n      .filter((set) => set.length > 3)\n      .filter((set) => set.includes(required))\n      .reduce((prev, cur) => {\n        const words = this.dictionary[cur.join('')]\n        if (words) {\n          words.forEach((word) => prev.push(word))\n        }\n        return prev\n      }, [])\n      .sort()\n    //setTimeout(() => {\n    this.setState({ solution, solving: false })\n    //}, 2000)\n  }\n  solutionRows() {\n    const rows = []\n    for (var r = 0; r < this.state.solution.length; r += 4) {\n      const cols = []\n      for (var c = 0; c < 4 && r + c < this.state.solution.length; c++) {\n        cols.push(\n          <Col key={'r' + r + 'c' + c} className=\"col-sm-3\">\n            {this.state.solution[r + c]}\n          </Col>\n        )\n      }\n      rows.push(<Row key={'r' + r}>{cols}</Row>)\n    }\n    return rows\n  }\n  render() {\n    return (\n      <div className=\"jumbotron d-flex align-items-center min-vh-100\">\n        <Container className=\"text-center\">\n          <Row>\n            <Col className=\"col-sm-4 mx-auto\">\n              {this.state.loading && <Spinner animation=\"grow\" />}\n              {!this.state.loading && (\n                <InputGroup>\n                  <FormControl\n                    placeholder=\"Spelling Bee letters\"\n                    onChange={this.inputChanged}\n                    maxLength={7}\n                    className=\"shadow-none\"\n                    value={this.state.input}\n                    autoFocus\n                  />\n                  <InputGroup.Text>\n                    {this.state.input\n                      ? this.state.input.charAt(0).toUpperCase()\n                      : 'Required Letter'}\n                  </InputGroup.Text>\n                  {!this.state.solving && (\n                    <Button\n                      variant=\"primary\"\n                      id=\"solve\"\n                      disabled={this.state.input.length !== 7}\n                      className=\"shadow-none\"\n                      onClick={this.solve}\n                    >\n                      Solve\n                    </Button>\n                  )}\n                  {this.state.solving && (\n                    <Button\n                      variant=\"primary\"\n                      id=\"solve\"\n                      disabled\n                      className=\"shadow-none\"\n                    >\n                      <span\n                        className=\"spinner-border spinner-border-sm\"\n                        role=\"status\"\n                        aria-hidden=\"true\"\n                      />\n                      &nbsp; Solving\n                    </Button>\n                  )}\n                </InputGroup>\n              )}\n            </Col>\n          </Row>\n        </Container>\n        {this.state.solution && (\n          <Modal\n            size=\"lg\"\n            show={true}\n            onHide={this.modalClosed}\n            scrollable={true}\n          >\n            <Modal.Header closeButton>\n              <Modal.Title>\n                Solution ({this.state.solution.length} words)\n              </Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n              <Container>{this.solutionRows()}</Container>\n            </Modal.Body>\n\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={this.modalClosed}>\n                Close\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}